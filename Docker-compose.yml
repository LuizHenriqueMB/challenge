# bandit:
services:
  bandit:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bandit_scanner
    volumes:
      - ./src:/src
      - ./reports:/output # Mapeia o projeto para o container
    entrypoint: ["bandit", "-r", "/src", "-f", "json", "-o", "/output/bandit-report.json"]

# gitleaks:
  gitleaks:
    image: zricethezav/gitleaks:latest
    container_name: gitleaks_git_scanner
    working_dir: /work
    volumes:
      - ./reports:/output
    entrypoint:
      - /bin/sh
      - -c
      - |
        git clone https://github.com/LuizHenriqueMB/challenge.git /repo && \
        gitleaks detect --no-git --source=/repo --report-format=json --report-path=/output/gitleaks-report.json
    

  # trivy:
  trivy:
    image: aquasec/trivy:latest
    volumes:
      - ./reports:/reports 
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: [] # Deixado vazio para passar o comando pelo Makefile

  # DefectDojo-db:
  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=defectdojo
      - POSTGRES_USER=defectdojo
      - POSTGRES_PASSWORD=your_secure_password # Mude para uma senha forte!
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U defectdojo"]
      interval: 5s
      timeout: 5s
      retries: 5

  # DefectDojo:
  defectdojo:
    image: defectdojo/defectdojo-django:latest # Ou uma versão específica, como 2.11.0
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DD_DATABASE_HOST=db
      - DD_DATABASE_NAME=defectdojo
      - DD_DATABASE_USER=defectdojo
      - DD_DATABASE_PASSWORD=your_secure_password # Use a mesma senha do banco de dados
      - DD_ADMIN_USERNAME=admin # Mude para um usuário administrador seguro
      - DD_ADMIN_PASSWORD=admin_secure_password # Mude para uma senha de administrador forte!
      - DD_DEBUG=False
    ports:
      - "8080:8080" # Mapeia a porta 8080 do host para a porta 8080 do contêiner
    volumes:
      - static_data:/app/static
      - media_data:/app/media
    command: ["gunicorn", "--bind", "0.0.0.0:8080", "dojo.wsgi:application"]

volumes:
  db_data:
  static_data:
  media_data:
